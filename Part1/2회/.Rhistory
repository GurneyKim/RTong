?read.csv()
?read.table()
df <- fread('./big_df.txt', sep = ',', header = T)
library(data.table)
df <- fread('./big_df.txt', sep = ',', header = T)
# fwrite(), fread() : 데이터 압축 없음, 문자 데이터 읽고 쓰기가 빠름, 텍스트 에디터 등으로 바로 열람 가능
install.packages('readr')
library(readr)
system.time(df <- read.csv('./big_df.txt'))
system.time(df <- read_csv('./big_df.txt'))
system.time(df <- fread('./big_df.txt'))
system.time(df <- read.csv('./big_df.txt')) # read.csv 안녕 널 보내줄게
system.time(df <- read_csv('./big_df.txt'))
system.time(df <- fread('./big_df.txt'))
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
write.table(df_midterm, file = 'df_midterm.txt') # sep 구분자 차이
read.table('./df_midterm.txt')
read.table('./df_midterm.txt',sep = '\t')
#### csv(comma-separated values) 파일 ####
# https://goo.gl/XsJvvT
?read.csv
# read
df_csv_exam <- read.csv("./data/csv_exam.csv")
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = F)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = F)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = F)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = c(1,2,3))
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = c(1,2,3))
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = c(2,3))
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T)#, skip = c(2,3))
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = 3)
df_csv_exam
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = c(2:3)
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
# read
df_csv_exam <- read.csv("./data/csv_exam.csv", header = T, skip = c(2:3)
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
#### csv(comma-separated values) 파일 ####
# https://goo.gl/XsJvvT
?read.csv
# read
df_csv_exam <- read.csv("./data/csv_exam.csv")
df_csv_exam
library(ggplot2)
data(mpg)
mpg
write.csv(mpg,'./mpg.csv')
write.csv2(mpg,'./mpg2.csv')
write.table(mpg,'./mpg3.csv')
write.csv(mpg,'./mpg4.txt')
write.csv(mpg,'./mpg1.csv')
read.csv('./mpg2.csv')
read.csv('./mpg2.csv',dec = '.')
a <- read.csv('./mpg2.csv',dec = '.')
str(a)
a <- read.csv('./mpg2.csv',sep = ';')
str(a)
write.csv(mpg,'./mpg5.csv')
read.csv('./mpg5.csv')
read.csv('./mpg5.csv',skip=3)
a <- read.csv('./mpg5.csv',skip=3)
write.csv(mpg,'./mpg6.csv',sep = '\t')
write.table(mpg,'./mpg6.csv',sep = "\t")
write.table(mpg,'./mpg6.txt',sep = "\t")
df_num = as.data.frame(matrix(runif(100000*100), 100000, 100))
df_str = data.frame(
stri_rand_strings(100000, 500),
stri_rand_strings(100000, 250, "[가-힣]")
)
#### Quiz) 행 = 1억개, 열 =3 개 인 데이터 프레임을 만들고 다양한 방법으로 읽어보시오
big_df2 <- data.frame(rnrom1 = rnorm(n = 50000000, mean = 0, sd = 1),
rnorm2 = rnorm(n = 50000000, mean = 2, sd = 3),
rnorm3 = rnorm(n = 50000000, mean = 10, sd = 5))
?write_csv
?write_csv
library(readr)
?write_csv
system.time(write.table(big_df, './big_df.txt', sep = ',', row.names = F))
system.time(fwrite(big_df, './big_df.txt', sep = ',', row.names = F))
fwrite(big_df2, './big_df2.csv', sep = ',')
aa <- fread('./big_df2.csv')
#### 데이터 파악하기 ####
mpg <- as.data.frame(ggplot2::mpg)
mpg <- read.csv('./data/mpg1.csv')
# head(): 최초 6행의 데이터를 보여줌(행갯수 조절 가능)
head(mpg)
# tail(): 마지막 6행의 데이터를 보여줌(행갯수 조절 가능)
tail(mpg)
# length(): 열 갯수 출력, 데이터의 길이 출력(vector)
length(mpg)
# nrow(): 행 갯수 출력(data.frame)
nrow(mpg)
# dim(): (행,열) 데이터 차원 출력
dim(mpg)
# View(): gui환경에서 데이터 확인
View(mpg)
# str(): 각 컬럼의 자료형과 초기 값을 보여줌
dplyr::glimpse(mpg)
head(mpg)
mpg <- read.csv('./data/mpg1.csv',row.names = X)
mpg <- read.csv('./data/mpg1.csv',row.names = 'X')
mpg
head(mpg)
str(mpg)
psych::describeBy(mpg[c('cty','hwy')], mpg$drv) # 그룹별(factor) 요약통계량
#### 변수명 변경 ####
library(dplyr)
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm2 <- df_midterm # 데이터프레임 복
df_midterm2 <- rename(df_midterm2, ENGLISH = english)
df_midterm2
#### 파생변수 만들기 ####
# 파생변수(Derived Variable) : 기존의 변수를 변형해 만든 변수
df_midterm$sum <- df_midterm$english + df_midterm$math
df_midterm
df_midterm$mean <- df_midterm$sum / 2
df_midterm
ifelse(10>1, '참입니다.','거짓입니다.')
ifelse(10<1, '참입니다.', '거짓입니다.')
sumarry(mpg)
summary(mpg)
mpg$total <- (mpg$cty + mpg$hwy) / 2
summary(mpg$total)
hist(mpg$total)
hist(mpg$total)
boxplot(mpg$total)
mpg$test <- ifelse(mpg$total >= 20, 'pass', 'fail')
mpg$test
table(mpg$test)
str(mpg)
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)     # 데이터 확인
table(mpg$grade)  # 등급 빈도표 생성
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
library(ggplot2)
qplot(mpg$test)
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
# A, B, C, D 등급 부여
mpg$grade2 <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
#### QUIZ) midwest 데이터 분석 ####
midwest <- ggplot2::midwest
midwest
#### Quiz 위에서 만든 데이터 프레임에 인덱싱 해보시오 ####
matrix1 <- matrix(c(1:100),10,10)
matrix()
matrix1
as.data.frame(matrix1)
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class
df_midterm <- data.frame(english, math, class)
df_midterm
class <- c(1, 1, 2, 2)
#### Quiz 데이터 프래임 3개 이상 만들어 보세요. ####
#### 데이터프레임 index ####
df_midterm[,1]
#### Quiz 데이터 프래임 3개 이상 만들어 보세요. ####
#### 데이터프레임 index ####
df_midterm[,1]
df_midterm$english
df
df_midterm[2,1]
df_midterm$english[2]
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
df_midterm[1:10,]
df_midterm[1:14,]
df_midterm[1:4,]
df_midterm[1:2,]
dplyr 를 사용하길 바란다.
exam <- read.csv("Data/csv_exam.csv")
3) 파이프 연산자 %>%
#### dplyr ####
library(dplyr)
exam <- read.csv("Data/csv_exam.csv")
exam
str(exam)
glimpse(exam)
head(exam,10)
exam %>% head()
subset(exam$class==1)
?subset
subset(exam, exam$class==1)
mean(exam$english)
exam %>% mean(english)
filter(exam, class==1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
## -------------------------------------------------------------------- ##
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
## -------------------------------------------------------------------- ##
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어 점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 1반이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
#### Quiz) gapmider 데이터 확인 ####
library(gapminder)
gapminder
str(gapminder)
exam %>% select(math)                  # math 추출
#### dplyr::select() ,열 추출 ####
# filter() vs select()
# filter()는 조건에 맞는 행 추출
# select()는 열 추출
exam %>% select(math)                  # math 추출
exam %>% select(english)               # english 추출
exam %>% select(class, math, english)  # class, math, english 변수 추출
exam %>% select(-math)                 # math 제외
exam %>% select(-math, -english)       # math, english 제외
#### filter() %>% select() , 조건으로 행 데이터를 뽑고 필요한 열 추출####
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성을 높이자.
exam %>%
filter(class == 1) %>%  # class가 1인 행 추출
select(english)         # english 추출
exam %>%
select(id, math) %>%    # id, math 추출
head                    # 앞부분 6행까지 추출
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
#### dplyr::arrange(), 정렬 ####
## -------------------------------------------------------------------- ##
exam %>% arrange(math)         # math 오름차순 정렬
exam %>% arrange(desc(math))   # math 내림차순 정렬
#exam %>% arrange(-math)
exam %>% arrange(class, math)  # class 및 math 오름차순 정렬
#### dplyr::mutate, 파생변수 생성 ####
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
exam %>%
mutate(total = math + english + science,         # 총합 변수 추가
mean = (math + english + science)/3) %>%  # 총평균 변수 추가
head                                             # 일부 추출
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(total) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
system.time(write.table(big_df, './data/big_df.txt', sep = ',', row.names = F))
system.time(df <- fread('./data/big_df.txt')) # read.csv 안녕 널 보내줄게
library(data.table)
system.time(df <- fread('./data/big_df.txt')) # read.csv 안녕 널 보내줄게
# data.frame 변환
df <- as.data.frame(matrix1)
class(df)
matrix2 <- as.matrix(df)
matrix2
#### dplyr::glimpse ####
glimpse(exam) # dplyr::glimpse(exam)
class(exam)
exam <- tbl_df(exam)
exam
class(exam)
#### Quiz) Gapminder ####
str(gapminder)
## -------------------------------------------------------------------- ##
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
#### dplyr::group_by(), 그룹별, 통계치 산출 ####
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math))     # math 평균 산출
glimpse(exam)
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생 수
mpg %>%
group_by(manufacturer, drv) %>%       # 회사별, 구동방식별 분리
summarise(mean_cty = mean(cty)) %>%   # cty 평균 산출
head(10)                              # 일부 출력
## -------------------------------------------------------------------- ##
mpg %>%
group_by(manufacturer) %>%           # 회사별로 분리
filter(class == "suv") %>%           # suv 추출
mutate(tot = (cty+hwy)/2) %>%        # 통합 연비 변수 생성
summarise(mean_tot = mean(tot)) %>%  # 통합 연비 평균 산출
arrange(desc(mean_tot)) %>%          # 내림차순 정렬
head(5)                              # 1~5위까지 출력
## -------------------------------------------------------------------- ##
ggplot2::mpg
mpg %>%
group_by(manufacturer) %>%           # 회사별로 분리
filter(class == "suv") %>%           # suv 추출
mutate(tot = (cty+hwy)/2) %>%        # 통합 연비 변수 생성
summarise(mean_tot = mean(tot)) %>%  # 통합 연비 평균 산출
arrange(desc(mean_tot)) %>%          # 내림차순 정렬
head(5)                              # 1~5위까지 출력
## -------------------------------------------------------------------- ##
mpg <-ggplot2::mpg
mpg %>%
group_by(manufacturer) %>%           # 회사별로 분리
filter(class == "suv") %>%           # suv 추출
mutate(tot = (cty+hwy)/2) %>%        # 통합 연비 변수 생성
summarise(mean_tot = mean(tot)) %>%  # 통합 연비 평균 산출
arrange(desc(mean_tot)) %>%          # 내림차순 정렬
head(5)                              # 1~5위까지 출력
#### dplyr::left_join(), 열 결합 ####
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
final = c(70, 83, 65, 95, 80))
test1  # test1 출력
test2  # test2 출력
total <- left_join(tes  t1, test2, by = "id")  # id 기준으로 합쳐서 total에 할당
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐서 total에 할당
total                                        # total 출력
## -------------------------------------------------------------------- ##
name <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
name
exam
exam_new <- left_join(exam, name, by = "class")
exam_new
?left_join
#### dplyr::bind_rows(), 행 결합 ####
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),
test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),
test = c(70, 83, 65, 95, 80))
group_a  # group_a 출력
group_b  # group_b 출력
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all                                 # group_all 출력
#### 정리 ####
## 1.조건에 맞는 데이터만 추출하기
exam %>% filter(english >= 80)
# 여러 조건 동시 충족
exam %>% filter(class == 1 & math >= 50)
# 여러 조건 중 하나 이상 충족
exam %>% filter(math >= 90 | english >= 90)
exam %>% filter(class %in% c(1,3,5))
## 2.필요한 변수만 추출하기
exam %>% select(math)
exam %>% select(class, math, english)
exam %>% filter(class==3) %>% select(math)
exam %>%
filter(class==3) %>%
select(math)
## 3.함수 조합하기, 일부만 출력하기
exam %>%
select(id, math) %>%
head(10)
# mutate()에 ifelse() 적용하기
exam %>% mutate(test = ifelse(science >= 60, "pass", "fail"))
# 추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
#### Quiz ny####
install.packages('nycflights13')
library(nycflights13)
nycflights13::weather
nycflights13::flights
table(flights)
table(flights$year)
test3 <- data.frame(nid = c(1, 2, 3, 4, 5),
final = c(70, 83, 65, 95, 80))
total <- left_join(test1, rename(test3, id=nid), by = 'id')
total
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
final = c(70, 83, 65, 95, 80))
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐서 total에 할당
total                                        # total 출력
total <- left_join(test1, rename(test3, id=nid), by = 'id')
total
#### Quiz ####
ggplot2::diamonds
#### Quiz ####
diamonds <- ggplot2::diamonds
glimpse(diamonds)
install.packages('tdiyverse')
library(tidyverse)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(lifeExp = median(lifeExp)) %>%
arrange(-lifeExp)
3. separate() : 하나의 컬럼을 두 개로 나눔
4. unite() : 두 개의 컬럼을 하나로 합침
library(tidyr)
table1
table2
table2a
table3
table4
table4a
table4b
# 1. gather() : wide form 데이터를 long form 으로 변환
table4b
table4b %>%
gather('1999', '2000',
key='year',
value = 'cases')
table4a
table4a %>%
gather('1999','2000',
key = 'year',
value = 'cases')
# 2. spread() : long form 데이터를 wide form 으로 변환
table2
table2 %>%
spread(key = type, value=count)
# 3. separate() : 하나의 컬럼을 두 개로 나눔
table3
table3 %>%
separate(rate,
into = c('cases', 'population'))
?separate
# If every row doesn't split into the same number of pieces, use
# the extra and file arguments to control what happens
df <- data.frame(x = c("a", "a b", "a b c", NA))
df %>% separate(x, c("a", "b"))
# If every row doesn't split into the same number of pieces, use
# the extra and file arguments to control what happens
df <- data.frame(x = c("a", "a b", "a b c", NA))
df
df %>% separate(x, c("a", "b"))
# The same behaviour but no warnings
df %>% separate(x, c("a", "b"), extra = "drop", fill = "right")
# Another option:
df %>% separate(x, c("a", "b"), extra = "merge", fill = "left")
df %>% separate(x, c("A", "B"))
table3 %>%
separate(rate,
into = c('cases', 'population'))
table3 %>%
separate(rate,
into = c('cases', 'population'),
convert = TRUE)
table3 %>%
separate(rate,
into = c('cases', 'population'))
table3 %>%
separate(rate,
into = c('cases', 'population'),
convert = TRUE) #기본 chr
# 4. unite() : 두 개의 컬럼을 하나로 합침
table5
table5 %>%
unite(new, century, year)
table5 %>%
unite(new, century, year, sep = ',')
table5 %>%
unite(new, century, year, sep = ' ')
table3 %>%
separate(rate,
into = c('cases', 'population'), sep = '') #기본 chr
table3 %>%
separate(rate,
into = c('cases', 'population'), sep = '/') #기본 chr
